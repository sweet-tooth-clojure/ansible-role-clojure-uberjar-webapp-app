---
- name: Add java 8 repo
  apt_repository: repo='ppa:openjdk-r/ppa'
  tags:
    - install

- name: Install required system packages
  apt: pkg="{{ item }}" state=present update-cache=yes
  with_items:
  - openjdk-8-jre
  - wget
  - vim
  - curl
  tags:
    - install

- name: Check existence of local env file
  local_action: stat path="{{ clojure_uberjar_webapp_app_env_local_path }}"
  register: app_env_local_file
  ignore_errors: True
  become: False
  tags:
    - configure

- name: Copy app env file
  template: src="{{ clojure_uberjar_webapp_app_env_local_path }}" dest="{{ clojure_uberjar_webapp_app_env_path }}"
  tags:
    - configure
  when: app_env_local_file.stat.exists
    
- name: Upload http env var file
  template: src="templates/http-env.j2" dest="{{ clojure_uberjar_webapp_app_http_env_path }}"
  tags:
    - configure
    
- name: Upload web app upstart config file
  template: src="templates/app-upstart.conf.j2" dest="/etc/init/{{ clojure_uberjar_webapp_app_service_name }}.conf"
  tags:
    - configure

- name: Make app log directory
  file: state=directory path={{ clojure_uberjar_webapp_app_log_dir }} owner={{ clojure_uberjar_webapp_app_user }} group={{ clojure_uberjar_webapp_app_user }} mode=755
  tags:
    - install

  # A non-ansible script creates files/app.jar
- name: Copy uberjar
  copy: src=files/app.jar dest={{ clojure_uberjar_webapp_app_root }}/{{ clojure_uberjar_webapp_app_jar_name }}
  tags:
    - deploy

- name: Copy check script
  template: src="{{ clojure_uberjar_webapp_app_check_local_path }}" dest="{{ clojure_uberjar_webapp_app_root }}/check.sh" mode=755
  tags:
    - deploy
    - check

- name: combine configs
  assemble:
    src: "{{ clojure_uberjar_webapp_app_config_dir }}"
    dest: "{{ clojure_uberjar_webapp_app_combined_config_path }}"
    delimiter: "\n"
    
- name: Run check
  command: chdir={{ clojure_uberjar_webapp_app_root }}/ bash ./check.sh
  tags:
    - deploy
    - check
  notify:
    - install schemas
    - restart web app
